buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
        classpath 'org.spongepowered:mixingradle:0.7.+'
    }
}

plugins {
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id "com.modrinth.minotaur" version "1.2.1"
}

apply plugin: 'java'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'

archivesBaseName = "${mod_id}-forge-${minecraft_version}"

minecraft {
    mappings channel: 'parchment', version: "${parchment_version}-${minecraft_version}"
    
    if (project.hasProperty('forge_ats_enabled') && project.findProperty('forge_ats_enabled').toBoolean()) {
        // This location is hardcoded in Forge and can not be changed.
        // https://github.com/MinecraftForge/MinecraftForge/blob/be1698bb1554f9c8fa2f58e32b9ab70bc4385e60/fmlloader/src/main/java/net/minecraftforge/fml/loading/moddiscovery/ModFile.java#L123
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
        project.logger.debug('Forge Access Transformers are enabled for this project.')
    }

    runs {
        client {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modClientRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modServerRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            taskName 'Data'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modDataRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

configurations {
    testCompileOnly.extendsFrom(compileOnly)
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    compileOnly project(":Common")

    compileOnly group:'com.google.auto.service', name:'auto-service', version:'1.0.1'
    annotationProcessor group:'com.google.auto.service', name:'auto-service', version:'1.0.1'

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    compileOnly(fg.deobf("curse.maven:hyle-609850:3748968"))

    compileOnly(fg.deobf("mezz.jei:jei-${rootProject.minecraft_version}:${rootProject.jei_version}:api"))
    // at runtime, use the full JEI jar
    runtimeOnly(fg.deobf("mezz.jei:jei-${rootProject.minecraft_version}:${rootProject.jei_version}"))

    compileOnly("me.shedaniel:RoughlyEnoughItems-api:7.3.432"){transitive=false}

    implementation(fg.deobf("io.github.lukebemish.dynamic_asset_generator:dynamic_asset_generator-forge-1.18.2:${rootProject.lib_version}"))
}

mixin {
    add sourceSets.main, 'excavated_variants.refmap.json'
    config 'mixin.excavated_variants_forge.json'
    add project(":Common").sourceSets.main, 'excavated_variants.refmap.json'
    config 'mixin.excavated_variants.json'
}

tasks.withType(JavaCompile) {
    source(project(":Common").sourceSets.main.allSource)
}

processResources {
    from project(":Common").sourceSets.main.resources
}


jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            artifact jar
        }
    }
    repositories {
        mavenLocal()
    }
}

// Publishing

def gitBranch() {
    def branch = ""
    def proc = "git rev-parse --abbrev-ref HEAD".execute()
    proc.in.eachLine { line -> branch = line }
    proc.err.eachLine { line -> println line }
    proc.waitFor()
    branch
}

curseforge {
    if (System.getenv('CURSEFORGE_KEY') != null) {
        apiKey = System.getenv('CURSEFORGE_KEY')
        project {
            id = '577411'
            changelog = "See: https://github.com/lukebemish/excavated_variants/blob/${gitBranch()}/changelogs/CHANGELOG.md"
            releaseType = 'beta'
            addGameVersion '1.18.2'
            addGameVersion 'Forge'
            mainArtifact(jar) {
                displayName = "Excavated Variants [Forge] v$project.version"
            }
            relations {
                requiredDependency 'dynamic-asset-generator'
            }
        }
    }
    options {
        forgeGradleIntegration = true
    }
}

import com.modrinth.minotaur.TaskModrinthUpload

task modrinth (type: TaskModrinthUpload){ // Make sure it runs after build!
    onlyIf {
        System.getenv("MODRINTH_KEY") // Only attempt to run this task if the MODRINTH variable is set, otherwise SKIP it
    }

    token = System.getenv("MODRINTH_KEY") // An environment property called MODRINTH that is your token, set via Gradle CLI, GitHub Actions, Idea Run Configuration, or other
    projectId = 'IZaMGxb0'
    versionNumber = "$project.version-forge" // Will fail if Modrinth has this version already
    // On fabric, use 'remapJar' instead of 'jar'
    versionType = "BETA"
    detectLoaders = false

    uploadFile = jar // This is the java jar task. If it can't find the jar, try 'jar.outputs.getFiles().asPath' in place of 'jar'
    addGameVersion('1.18.2') // Call this multiple times to add multiple game versions. There are tools that can help you generate the list of versions
    addLoader('forge')
}

afterEvaluate {
    tasks.curseforge.dependsOn build
    tasks.modrinth.dependsOn build
}
plugins {
	id 'org.quiltmc.loom' version '0.12.+'
	id 'maven-publish'
	id 'com.matthewprenger.cursegradle' version '1.4.0'
	id "com.modrinth.minotaur" version "1.2.1"
}

archivesBaseName = "${mod_id}-quilt-${minecraft_version}"

repositories {

	maven {
		name 'Quilt (Release)'
		url 'https://maven.quiltmc.org/repository/release/'
	}

	maven {
		name 'Quilt (Snapshot)'
		url 'https://maven.quiltmc.org/repository/snapshot/'
		content {
			includeGroup 'org.quiltmc.fabric_api_qsl'
			includeGroupByRegex 'org\\.quiltmc\\.qsl(?:\\.[a-z_]+)?'
		}
	}
}

configurations {
	testCompileOnly.extendsFrom(compileOnly)
}

dependencies {

	minecraft "com.mojang:minecraft:${minecraft_version}"
	mappings loom.layered() {
		officialMojangMappings()
		parchment("org.parchmentmc.data:parchment-${minecraft_version}:${parchment_version}@zip")
	}
	modImplementation "org.quiltmc:quilt-loader:${quilt_loader_version}"

	modImplementation("org.quiltmc:qsl:${quilt_stdlib_version}") {
		exclude group: "net.fabricmc"
	}

	implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'
	implementation project(":Common")

	compileOnly group:'com.google.auto.service', name:'auto-service', version:'1.0.1'
	annotationProcessor group:'com.google.auto.service', name:'auto-service', version:'1.0.1'

	modCompileOnly "curse.maven:hyle-609850:3746990"
	modImplementation("io.github.lukebemish.dynamic_asset_generator:dynamic_asset_generator-quilt-1.18.2:${rootProject.lib_version}")
	compileOnly("me.shedaniel:RoughlyEnoughItems-api:7.3.432"){transitive=false}

	modImplementation("org.quiltmc.quilted-fabric-api:quilted-fabric-api:${quilted_fabric_api}") {
		exclude group: "org.quiltmc", module:" qsl"
	}
}

loom {
	accessWidenerPath = file("src/main/resources/excavated_variants.accessWidener")

	runs {
		client {
			client()
			setConfigName("Quilt Client")
			ideConfigGenerated(true)
			runDir("run")
		}
		server {
			server()
			setConfigName("Quilt Server")
			ideConfigGenerated(true)
			runDir("run")
		}
	}

	mixin {
		defaultRefmapName = "excavated_variants.refmap.json"
	}
}

processResources {
    from project(":Common").sourceSets.main.resources
	inputs.property "version", project.version

	filesMatching("quilt.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile) {
    source(project(":Common").sourceSets.main.allSource)
}

jar {
	from("LICENSE") {
		rename { "${it}_${mod_name}"}
	}
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            from components.java
        }
    }

    repositories {
		mavenLocal()
    }
}

// Publishing

def gitBranch() {
	def branch = ""
	def proc = "git rev-parse --abbrev-ref HEAD".execute()
	proc.in.eachLine { line -> branch = line }
	proc.err.eachLine { line -> println line }
	proc.waitFor()
	branch
}

/*curseforge {
	if (System.getenv('CURSEFORGE_KEY') != null) {
		apiKey = System.getenv('CURSEFORGE_KEY')
		project {
			id = '577411'
			changelog = "See: https://github.com/lukebemish/excavated_variants/blob/${gitBranch()}/changelogs/CHANGELOG.md"
			releaseType = 'beta'
			addGameVersion '1.18.2'
			addGameVersion 'Fabric'
			mainArtifact(remapJar) {
				displayName = "Excavated Variants [Fabric] v$project.version"
			}
			relations {
				requiredDependency 'fabric-api'
				requiredDependency 'dynamic-asset-generator'
			}
		}
	}
	options {
		forgeGradleIntegration = false
	}
}*/

import com.modrinth.minotaur.TaskModrinthUpload

task modrinth (type: TaskModrinthUpload){ // Make sure it runs after build!
	onlyIf {
		System.getenv("MODRINTH_KEY") // Only attempt to run this task if the MODRINTH variable is set, otherwise SKIP it
	}

	token = System.getenv("MODRINTH_KEY") // An environment property called MODRINTH that is your token, set via Gradle CLI, GitHub Actions, Idea Run Configuration, or other
	projectId = 'IZaMGxb0'
	versionNumber = "$project.version-quilt" // Will fail if Modrinth has this version already
	// On fabric, use 'remapJar' instead of 'jar'
	versionType = "BETA"
	detectLoaders = false

	uploadFile = remapJar // This is the java jar task. If it can't find the jar, try 'jar.outputs.getFiles().asPath' in place of 'jar'
	addGameVersion('1.18.2') // Call this multiple times to add multiple game versions. There are tools that can help you generate the list of versions
	addLoader('quilt')
}

afterEvaluate {
	tasks.curseforge.dependsOn build
	tasks.modrinth.dependsOn build
}

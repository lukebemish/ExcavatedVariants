plugins {
    alias libs.plugins.quilt.licenser apply false
    alias libs.plugins.mdg
    alias libs.plugins.quilt.loom apply false
}

apply from: 'version.gradle'

modsDotGroovy {
    dslVersion = libs.versions.mdg.dsl.get()
    platform 'multiloader'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'maven-publish'
    apply plugin: 'java-library'
    apply plugin: libs.plugins.quilt.licenser.get().pluginId

    java.toolchain.languageVersion = JavaLanguageVersion.of(17)
    java.withSourcesJar()
    java.withJavadocJar()

    javadoc {
        include "**/api/**"
    }

    license {
        rule rootProject.file('header.txt')
        exclude '**/*.mcmeta'
        exclude '**/package-info.java'
    }

    jar {
        manifest {
            attributes([
                    'Specification-Title'     : mod_name,
                    'Specification-Vendor'    : mod_author,
                    'Specification-Version'   : rootProject.version,
                    'Implementation-Title'    : project.name,
                    'Implementation-Version'  : rootProject.version,
                    'Implementation-Vendor'   : mod_author,
                    'Implementation-Commit-Time': versioning.getGitCommitDate(),
                    'Implementation-Commit': versioning.getGitCommit(),
                    'Build-On-Minecraft'      : libs.versions.minecraft.get(),
            ])
        }
    }
    
    repositories {
        mavenCentral()

        maven {
            name = 'Sponge / Mixin'
            url = 'https://repo.spongepowered.org/repository/maven-public/'
        }

        maven {
            // JEI
            name = 'BlameJared Maven (CrT / Bookshelf)'
            url = 'https://maven.blamejared.com'
            content {
                includeGroup 'mezz.jei'
            }
        }

        maven {
            name = 'ParchmentMC'
            url = 'https://maven.parchmentmc.org'
        }

        maven {
            name 'Quilt (Release)'
            url 'https://maven.quiltmc.org/repository/release/'
        }

        maven {
            name = 'TheModdingInquisition'
            url = 'https://maven.moddinginquisition.org/releases'
        }

        maven {
            url = 'https://maven.lukebemish.dev/releases'
        }

        // TODO: Remove this once actual releases exist
        maven {
            url = 'https://maven.lukebemish.dev/pullrequests'
        }

        maven {
            // REI
            url "https://maven.architectury.dev/"
            content {
                includeGroupAndSubgroups 'me.shedaniel'
                includeGroupAndSubgroups 'dev.architectury'
            }
        }

        maven {
            // EMI
            name = "TerraformersMC"
            url = "https://maven.terraformersmc.com/"
            content {
                includeGroupAndSubgroups 'dev.emi'
            }
        }
    }


    tasks.withType(JavaCompile).configureEach {
        it.options.encoding = 'UTF-8'
        it.options.release = 17
    }

    dependencies {
        compileOnly libs.jetbrains.annotations
        implementation libs.nightconfig.core
        implementation libs.nightconfig.toml
        implementation libs.jankson
    }

    // Disables Gradle's custom module metadata from being published to maven. The
    // metadata includes mapped dependencies which are not reasonably consumable by
    // other mod developers.
    tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }

    publishing {
        repositories {
            if (System.getenv('PR_NUMBER')) {
                maven {
                    name = 'LocalMaven'
                    url = rootProject.layout.buildDirectory.dir('repo')
                }
            } else {
                maven {
                    name = 'PersonalMaven'
                    url = uri(System.getenv('SNAPSHOT_MAVEN_URL') ?: System.getenv('MAVEN_URL') ?: 'https://maven.lukebemish.dev/releases')
                    credentials {
                        username = System.getenv('MAVEN_USER') ?: findProperty('lukebemishMavenUser') ?: ''
                        password = System.getenv('MAVEN_PASSWORD') ?: findProperty('lukebemishMavenPassword') ?: ''
                    }
                }
            }
        }
    }
}
